openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    WASAPhoto is a webapp that allows users to upload/delete photos, follow other users,
    view their photos, like them and comment on them.
  version: "1"
tags:
  - name: photo interaction
    description: Operations about photos
  - name: stream
    description: Returns user stream
  - name: login
    description: Login user
  - name: manage profile
    description: Manage user profile

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: integer
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        text/plain:
          schema:
            description: UnauthorizedError response
            type: string
            example: UnauthorizedError
    BadRequest:
      description: Request body wrongly formatted
      content:
        text/plain:
          schema:
            description:  Request body wrongly formatted
            type: string
            example: Comment text is empty
    ObjectNotFoundError:
      description: Photo not found
      content:
        text/plain:
          schema:
            description: ObjectNotFoundError response
            type: string
            example: User not found
    ObjectDeletedSuccessfully:
      description: Response for successfully created object
      content:
        text/plain:
          schema:
            description: ObjectDeletedSuccessfully response
            type: string
            example: Object deleted
    ConflictResourceStateError:
      description: Conflict with the current resource state
      content:
        text/plain:
          schema:
            description: ConflictResourceStateError response
            type: string
            example: User already banned
    ForbiddenError:
      description: Insufficient rights to a resource
      content:
        text/plain:
          schema:
            description: ForbiddenError response
            type: string
            example: Unauthorized to delete that comment
    FollowingRelationChanged:
      description: Following relation has been changed
      content:
        text/plain:
          schema:
            description: Following relation has been changed
            type: string
            example: User unfollowed correctly
    UserBanStateChanged:
      description: User ban state has been changed
      content:
        text/plain:
          schema:
            description: User ban state has been changed
            type: string
            example: User x has been banned
    ObjectCreatedSuccessfully:
      description: Object created successfully
      content:
        text/plain:
          schema:
            description: Object created successfully
            type: string
            example: Like added successfully

  parameters:
    user_id:
      schema:
        type: integer
        example: 1
      name: user_id
      in: path
      required: true
      description: User identifier
    auth_user_id:
      schema:
        type: integer
        example: 1
      name: auth_user_id
      in: path
      required: true
      description: User identifier
    photo_id:
      name: photo_id
      schema:
        type: integer
        example: 1
      required: true
      description: Photo identifier
      in: path
    comment_id:
      name: comment_id
      schema:
        type: integer
        example: 1
      required: true
      description: Comment identifier
      in: path

  schemas:
    Username:
      description: User name
      type: string
      example: Maria
      pattern: '^[a-zA-Z0-9_.]*$'
      minLength: 3
      maxLength: 16
    User:
      title: User
      description:  A short description of the user entity
      type: object
      properties:
        id:
          description: User identifier
          type: integer
          example: 1
        username: {$ref: "#/components/schemas/Username"}
    UserProfile:
      title: UserProfile
      description: A resume of user photo, followers and following
      type: object
      properties:
        user_info:
          {$ref: "#/components/schemas/User"}
        photos:
          type: array
          description: User photos
          items: {$ref: "#/components/schemas/Photo"}
          minItems: 0
          maxItems: 10
        profile_info:
          {$ref: "#/components/schemas/ProfileInfo"}
    Uploaded_at:
      type: string
      format: date-time
      example: 2017-07-21T17:32:28Z
      minLength: 1
      maxLength: 30
      description: uploaded time
    Image:
      type: string
      format: binary
      description: Image attached to photo
      example: "10100110101010"
      minLength: 1
      maxLength: 1000000
    Photo:
      type: object
      properties:
        id:
          description: photo identifier
          type: integer
          example: 1
        uploaded_at:
         { $ref: "#/components/schemas/Uploaded_at"}
        photoInfo:
          {$ref: "#/components/schemas/PhotoInfo"}
        owner:
          { $ref: "#/components/schemas/User" }
    PhotoInfo:
      description: Info about likes and comments
      type: object
      properties:
        likes_counter:
          type: integer
          description: number of photo likes
          example: 10
        comments_counter:
          type: integer
          description: number of photo comments
          example: 2
    ProfileInfo:
      description: Info about followers, followind and photo
      type: object
      properties:
        photos_counter:
          type: integer
          description: number of user photos
          example: 10
        followers_counter:
          type: integer
          description: number of user followers
          example: 2
        followingCounter:
          type: integer
          description: number of user following
          example: 2
    Comment:
      type: object
      description: Comment on a photo
      properties:
        id:
          description: Comment identifier
          type: integer
          example: 1
        text:
          type: string
          description: Content of the comment
          example: Good photo
          minLength: 1
          maxLength: 100
          pattern: '^[ a-zA-Z0-9_.-]*'
        owner:  {$ref: "#/components/schemas/User"}
        uploaded_at:
         { $ref: "#/components/schemas/Uploaded_at"}
    PhotoComments:
      description: Object with photo comments
      type: object
      properties:
        comments:
          description: Comments of the photo
          type: array
          items: { $ref: "#/components/schemas/Comment" }
          minItems: 0
          maxItems: 999
    UserStream:
      description: Object with user stream
      type: object
      properties:
        photos:
          description: Photos of user stream
          type: array
          minItems: 0
          maxItems: 10
          items: { $ref: "#/components/schemas/Photo" }
    BannedUsers:
      description: Object with the banned users list
      type: object
      properties:
        users:
          description: Banned users
          type: array
          minItems: 0
          maxItems: 100
          items: { $ref: "#/components/schemas/User" }
    FollowedUsers:
      description: Object with the followed users list
      type: object
      properties:
        users:
          description: Followed users
          type: array
          items: { $ref: "#/components/schemas/User" }
          minItems: 0
          maxItems: 100
    UserIdentifier:
      description: User identifier
      type: object
      properties:
        identifier:
          description: User identifier
          type: integer
          example: 1
    UsernameObject:
      description: User name
      type: object
      properties:
        username: { $ref: "#/components/schemas/Username" }
paths:
  /session:
    post:
      tags: ["login"]
      summary:  Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId:  doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              {$ref: "#/components/schemas/UsernameObject"}
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/UserIdentifier" }
        '400':
          {$ref: "#/components/responses/BadRequest" }


  /profiles/{user_id}:
    get:
      parameters:
        - { $ref: "#/components/parameters/user_id" }
      tags: [ "manage profile" ]
      summary: Gets a user profile
      description: |-
        Get the profile of the user with the given user_id.
        If the user_id belongs to a user who banned the authenticated one,
        an error response will be returned.
      operationId: getUserProfile
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          { $ref: "#/components/responses/ForbiddenError" }
        "404":
          { $ref: "#/components/responses/ObjectNotFoundError" }
      security:
        - bearerAuth: [ ]

  /profiles/{user_id}/name:
    put:
      parameters:
        - { $ref: "#/components/parameters/user_id" }
      tags: [ "manage profile" ]
      summary: Sets a new username for the authenticated user
      description: |-
        If the user is authenticated, it will change
        his username and return the new user resource.
        If who makes the request is not authenticated, an error response will be returned.
        If the request body is not formatted correctly, an error response will be returned.
      operationId: setMyUserName
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UsernameObject" }
      responses:
        "200":
          description: Username set successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        "400":
          { $ref: "#/components/responses/BadRequest" }
        "401":
          { $ref: "#/components/responses/UnauthorizedError" }
        "404":
            { $ref: "#/components/responses/ObjectNotFoundError"}
      security:
        - bearerAuth: [ ]

  /profiles/{user_id}/photos:
    post:
      parameters:
        - { $ref: "#/components/parameters/user_id" }
      tags: ["manage profile"]
      summary: Uploads a new photo to the authenticated user profile
      description: |-
        It adds a new photo to authenticated user profile, the uploaded photo identifier will be returned.
        If the request body is not formatted correctly, an error response will be returned.
        If who makes the request is not authenticated, an error response will be returned.
      operationId:  uploadPhoto
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: Image object
              type: object
              properties:
                image: {$ref: "#/components/schemas/Image"}
      responses:
        "201":
          {$ref: "#/components/responses/ObjectCreatedSuccessfully"}
        "400":
          {$ref: "#/components/responses/BadRequest"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
      security:
        - bearerAuth: []

  /profiles/{user_id}/photos/{photo_id}:
    parameters:
      - { $ref: "#/components/parameters/photo_id" }
      - { $ref: "#/components/parameters/user_id" }
    get:
      tags: [ "manage profile" ]
      summary: Returns the photo
      description: |-
        Returns the photo with the given photo_id of the user with the given user_id.
        If who makes the request is not authenticated, an error response will be returned.
        If a photo is not found, an error response will be returned.
      operationId: getImage
      responses:
        "200":
          description: Photo
          content:
            image/png:
              schema:
                  $ref: "#/components/schemas/Image"
        "401":
          { $ref: "#/components/responses/UnauthorizedError" }
        "403":
          { $ref: "#/components/responses/ForbiddenError" }
        "404":
          { $ref: "#/components/responses/ObjectNotFoundError" }
      security:
        - bearerAuth: [ ]
    delete:
      tags: ["manage profile"]
      summary: Deletes the photo of the authenticated user
      description: |-
        If a photo with the identifier in path belongs to the user
        authenticated profile, it will be deleted.
        If who makes the request is not authenticated, an error response will be returned.
        If a photo is not found, an error response will be returned.
      operationId: deletePhoto
      responses:
        "200":
          {$ref: "#/components/responses/ObjectDeletedSuccessfully"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "403":
          {$ref: "#/components/responses/ForbiddenError"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
      security:
        - bearerAuth: []

  /profiles/{auth_user_id}/following/{user_id}:
    parameters:
      - {$ref: "#/components/parameters/user_id" }
      - {$ref: "#/components/parameters/auth_user_id"}
    put:
      tags: ["users relations"]
      summary:  Follows a user
      description: |-
        Follow the user with the user id given in the path if the user is authenticated.
        If the user id given belongs to a user already followed, an error response will be returned.
        If the user id given is not found, an error response will be returned.
        If who makes the request is not authenticated, an error response will be returned.
      operationId:  followUser
      responses:
        "200":
          {$ref: "#/components/responses/FollowingRelationChanged"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
        "409":
          {$ref: "#/components/responses/ConflictResourceStateError"}
      security:
        - bearerAuth: []
    delete:
      tags: ["users relations"]
      summary:  Unfollows a user
      description: |-
        Unfollow the user with the user_id specified in the path if the user is authenticated.
        If the user_id given is not found, an error response will be returned.
        If the user_id given belongs to a user not followed, an error response will be returned.
        If who makes the request is not authenticated, an error response will be returned.
      operationId:  unfollowUser
      responses:
        "200":
          {$ref: "#/components/responses/FollowingRelationChanged"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
        "409":
          {$ref: "#/components/responses/ConflictResourceStateError"}
      security:
        - bearerAuth: []

  /profiles/{auth_user_id}/following/:
    parameters:
      - {$ref: "#/components/parameters/auth_user_id"}
    get:
      tags: [ "users relations" ]
      summary: Gets followed users
      description: |-
        Get the list of users followed by the authenticated user.
        If who makes the request is not authenticated, an error response will be returned.
      operationId: getFollowedUsers
      responses:
        "200":
          description: List of the followed users
          content:
            application/json:
              schema:
                { $ref: "#/components/schemas/FollowedUsers" }

        "401":
          { $ref: "#/components/responses/UnauthorizedError" }
      security:
        - bearerAuth: [ ]

  /profiles/{auth_user_id}/ban/{user_id}:
    parameters:
      - {$ref: "#/components/parameters/user_id" }
      - {$ref: "#/components/parameters/auth_user_id"}
    put:
      tags: ["users relations"]
      summary:  Bans a user
      description: |-
        Ban the user with the user_id given in the path if the user is authenticated.
        If the user_id given is not found, an error response will be returned.
        If the user_id given belongs to a user already banned, an error response will be returned.
        If who makes the request is not authenticated, an error response will be returned.
      operationId:  banUser
      responses:
        "200":
          {$ref: "#/components/responses/UserBanStateChanged"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
        "409":
          {$ref: "#/components/responses/ConflictResourceStateError"}
      security:
        - bearerAuth: []
    delete:
      tags: ["users relations"]
      summary:  Unbans a user
      description: |-
        Unban the user with the user_id specified in the path if the user is authenticated.
        If the user_id given is not found, error will be returned.
        If the user_id given belongs to a user not banned, error will be returned.
        If who makes the request is not authenticated, an error response will be returned.
      operationId:  unbanUser
      responses:
        "200":
          {$ref: "#/components/responses/UserBanStateChanged"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
        "409":
          {$ref: "#/components/responses/ConflictResourceStateError"}
      security:
        - bearerAuth: []

  /profiles/{auth_user_id}/ban/:
    parameters:
      - {$ref: "#/components/parameters/auth_user_id"}
    get:
      tags: ["users relations"]
      summary:  Gets banned users
      description: |-
        Get the list of users banned by the authenticated user.
        If who makes the request is not authenticated, an error response will be returned.
      operationId:  getBannedUsers
      responses:
        "200":
          description: List of the banned users
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/BannedUsers"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
      security:
        - bearerAuth: []

  /stream/{user_id}:
    get:
      parameters:
        - { $ref: "#/components/parameters/user_id" }
      tags: ["stream"]
      summary:  Gets authenticated user photos stream
      description: |-
        Return authenticated user' stream of photos (followed users ones) in
        reverse chronological order and additional information
        like updating date, and the number of comments and likes for each photo.
        If who makes the request is not authenticated, an error response will be returned.
      operationId:  getMyStream
      responses:
        "200":
          description: "User stream"
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/UserStream"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
      security:
        - bearerAuth: []

  /profiles/{user_id}/photos/{photo_id}/likes/{auth_user_id}:
    parameters:
      - {$ref: "#/components/parameters/photo_id"}
      - {$ref: "#/components/parameters/user_id" }
      - {$ref: "#/components/parameters/auth_user_id"}
    put:
      tags: ["photo interaction"]
      summary: Adds a like to the photo
      description: |-
        If the photo with the id given in path exists, a user is authenticated, it adds a like.
        If the authenticated user already added like to the photo, an error response will be returned.
        If who makes the request is not authenticated, an error response will be returned.
        If the photo doesn't exist, an error response will be returned.
      operationId: likePhoto
      responses:
        "200":
          {$ref: "#/components/responses/ObjectCreatedSuccessfully"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
        "409":
          {$ref: "#/components/responses/ConflictResourceStateError"}
      security:
        - bearerAuth: []
    delete:
      tags: ["photo interaction"]
      summary:  Removes like from the photo
      description: |-
        If the photo with the id given in path exists, the authenticated user added a like previously, it will be removed.
        If the photo exists and the authenticated user didn't add like to it, an error response will be returned.
        If who makes the request is not authenticated, an error response will be returned.
        If the photo doesn't exist, an error response will be returned.
      operationId: unlikePhoto
      responses:
        "200":
          {$ref: "#/components/responses/ObjectDeletedSuccessfully"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
        "409":
          {$ref: "#/components/responses/ConflictResourceStateError"}
      security:
        - bearerAuth: []

  /profiles/{user_id}/photos/{photo_id}/comments:
    parameters:
      - {$ref: "#/components/parameters/photo_id"}
      - {$ref: "#/components/parameters/user_id" }
    get:
      tags: ["photo interaction"]
      summary:  Retrieves the photo's comments
      description: |-
        If the photo exists, retrieve its comments.
        If the photo doesn't exist, an error response will be returned.
      operationId: getPhotoComments
      responses:
        "200":
          description: List of photo comments
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/PhotoComments"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
    post:
      tags: ["photo interaction"]
      summary:  Adds a comment to the photo
      description: |-
        If the photo exists, add a comment to it from the authenticated user.
        If who makes the request is not authenticated, an error response will be returned.
        If the photo doesn't exist, an error response will be returned.
        If request body is not formatted correctly, an error response will be returned.
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema:
                {$ref: "#/components/schemas/Comment"}
      responses:
        "201":
          {$ref: "#/components/responses/ObjectCreatedSuccessfully"}
        "400":
          {$ref: "#/components/responses/BadRequest"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          {$ref: "#/components/responses/ObjectNotFoundError"}
      security:
        - bearerAuth: []

  /profiles/{user_id}/photos/{photo_id}/comments/{comment_id}:
    parameters:
      - { $ref: "#/components/parameters/photo_id" }
      - { $ref: "#/components/parameters/comment_id"}
      - { $ref: "#/components/parameters/user_id" }
    delete:
      tags: ["photo interaction"]
      summary: Deletes a comment
      description: |-
        If the photo exists, the comment with the id given in the path belongs to the authenticated user, delete it.
        If the photo exists and there is the comment with the id given in the path but doesn't belong to the authenticated user, an error response will be returned.
        If who makes the request is not authenticated, an error response will be returned.
      operationId: uncommentPhoto
      responses:
        "200":
          {$ref: "#/components/responses/ObjectDeletedSuccessfully"}
        "401":
          { $ref: "#/components/responses/UnauthorizedError" }
        "403":
          {$ref: "#/components/responses/ForbiddenError"}
        "404":
          description: Comment not found
      security:
        - bearerAuth: [ ]
