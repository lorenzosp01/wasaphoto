openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    This is the app for Wasa Project 2022/23
  version: "1"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: integer
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  parameters:
    UserID:
      schema:
        type: integer
        example: 1
      name: id
      in: path
      required: true
      description: User identifier
    Username:
      schema:
        type: string
        example: maria00
      name: username
      in: path
      required: true
      description: User name
    
  schemas:
    Username:
      type: string
      example: Maria
      pattern: 'Ë†.*?$'
      minLength: 3
      maxLength: 16
    User:
      title: User 
      description: "Represents a user who uses WASAPhoto"
      type: object
      properties:
        id:
          description: User identifier
          type: integer
          example: 1
        username: {$ref: "#/components/schemas/Username"}
    Photos:
      title: Photos
      type: array
      items: 
        type: string
      example: ["www.container.com/img.jpg"]
    UserProfile:
      title: UserProfile
      description: "Represents a user who uses WASAPhoto"
      type: object
      properties:
        id:
          description: User identifier
          type: integer
          example: 1
        username: {$ref: "#/components/schemas/Username"}
        photos:  {$ref: "#/components/schemas/Photos"}
        photosAmount:
          description: Photos amout
          type: integer
          example: 1
        followersAmount:
          description: Followers amount
          type: integer
          example: 10
        followingAmount:
          description: Followers amount
          type: integer
          example: 10
    Image:
      type: string
      format: binary
    Post:
      type: object
      properties:
        photo:
          type: string
          example: www.container.com/img.jpg
        uploadedAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        likeAmount:
          type: integer
          example: 10
        commentsAmount:
          type: integer
          example: 2
        owner:
          type: string # da modificare
          example: Maria
    Comment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        text:
          type: string
          example: Good photo
        owner:
          type: string
          example: maria # da modificare
        creation_date:
          type: string
          format: date-time

paths:
  /session:
    post:
      tags: ["login"]
      summary:  Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId:  doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                usernname: {$ref: "#/components/schemas/Username"}
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier: 
                    type: integer
                    example: "1"

  /profile/username:
    put:
      tags: ["set username"]
      summary: Sets a name for the user
      description: |-
        If the identifier in request header belongs to a user, it will change
        the username and return the new user resource.
        If the identifier is unknown, nothing happens.
      operationId:  setMyUserName
      requestBody: 
        content:
          application/json:
            schema: {$ref: "#/components/schemas/User"}
      responses:
        "200":
          description: Username set successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User"}
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier: 
                    type: integer
                    example: "1"
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
      security:   
        - bearerAuth: []
  
  /profiles/{username}:
    get:
      # specificare i parametri
      tags: ["get profile"]
      summary:  Get user profile
      description: |-
        Get the user profile
      operationId: getUserProfile
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "404":
          description: User not found

  /profile/photos: 
    post:
      # specificare i parametri
      tags: ["photo handle"]
      summary: Upload a new photo to user profile
      description: |-
        Upload a new photo to user feed 
      operationId:  uploadPhoto
      requestBody: 
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                image: {$ref: "#/components/schemas/Image"}  
      responses: 
        "200":
          description: Photo uploaded successfully
          # ritornare id photo?
        "400":
          description: Bad request
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
      security:   
      - bearerAuth: []

  /profile/photos/{id}:
    delete:
      # specificare i parametri
      tags: ["photo handle"]
      summary: Delete the photo
      description: |-
        Delete the photo specified
      operationId: deletePhoto
      responses:
        "200":
          description: Photo deleted successfully
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: Not Found
      security:
      - bearerAuth: []

  /profile/following/{username}:
    parameters: 
        - {$ref: "#/components/parameters/Username"}
    post:
      tags: ["following"]
      summary: Follow an user
      description: |-
        Follow the user with the id specified
      operationId:  followUser
      responses:
        "200":
          description: User followed correctly
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: User not found
      security:
      - bearerAuth: []
    delete:
      tags: ["following"]
      summary:  Unfollow an user
      description: |-
        Follow the user with the id specified
      operationId:  unfollowUser
      responses:
        "200":
          description: User unfollowed correctly
        "400":
          description: User not followed
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: User not found
      security:
      - bearerAuth: []
  

  /profile/ban/{username}:
    parameters: 
        - {$ref: "#/components/parameters/Username"}
    post:
      tags: ["ban user"]
      summary:  Ban an user
      description: |-
        Ban the user specified
      operationId:  banUser
      responses:
        "200":
          description: User banned correctly
        "400":
          description: Request user
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: User not found
      security:
      - bearerAuth: []
    delete:
      parameters: 
        - {$ref: "#/components/parameters/Username"}
      tags: ["unban user"]
      summary:  Unban an user
      description: |-
        Unban the user specified
      operationId:  unbanUser
      responses:
        "200":
          description: "User unbanned correctly"
        "404":
          description: "User not found"
        "400":
          description: "User not banned"
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
      security:
      - bearerAuth: []
  
  /stream:
    get:
      tags: ["get stream"]
      summary:  Get user photos stream
      description: |-
        Return user authenticated' stream of photos and additional information
        like updating date, and the number of comments and likes for each photo
      operationId:  getMyStream
      responses:
        "200":
          description: "User stream"
          content:
            application/json:
              schema:
                type: array
                items: 
                  {$ref: "#/components/schemas/Post"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
      security:
      - bearerAuth: []

  /photos/{photoId}/likes:
    parameters:
      - name: photoId
        schema:
          type: integer
          example: 1
        required: true
        in: path
    post:
      tags: ["photo likes"]
      summary: Add a like to the photo
      description: |-
        If the photo exists, add a like to it.
        If the photo doesn't exist, nothing happens.
      operationId: likePhoto
      responses:
        "200":
          description: Like added successfully
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: Photo not found
      security: 
        - bearerAuth: []
    delete:
      # specificare i parametri
      tags: ["photo likes"]
      summary:  Remove the like from the photo
      description: |-
        If the photo exists and a like was added, it will be removed.
        If the photo exists and there were no like or no photo is targeted,
        nothing happens.
      operationId: unlikePhoto
      responses:
        "200":
          description: Like removed successfully
        "400":
          description: Like not found
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: Photo not found
      security: 
        - bearerAuth: []
  
  /photos/{photoId}/comments:
    parameters:
      - name: photoId
        schema:
          type: integer
          example: 1
        required: true
        in: path
    get:
      tags: ["photo comments"]
      summary:  Retrieve the photo's comments
      description: |-
        If the photo exists, retrieve its comments.
        If the photo doesn't exist, nothing happens.
      operationId: getPhotoComments
      responses:
        "200":
          description:  Comments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  {$ref: "#/components/schemas/Comment"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: Photo not found
    post:
      tags: ["photo comments"]
      summary:  Add a comment to the photo
      description: |-
        If the photo exists, add a comment to it.
        If the photo doesn't exist, nothing happens.
      operationId: commentPhoto
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: Good photo
      responses:
        "200":
          description:  Comment added successfully
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: Photo not found
      security: 
        - bearerAuth: []

  /comments/{commentId}:
    parameters:
      - name: commentId
        schema:
          type: integer
          example: 1
        required: true
        in: path
    get:
      tags: ["photo comments"]
      summary:  Retrieve a comment
      description: |-
        If the comment exists, it will be returned.
        If the comment doesn't exist, nothing happens.
      operationId: getComment
      responses:
        "200":
          description: Comment retrieved successfully
          content:
            application/json:
              schema:
                {$ref: "#/components/schemas/Comment"}
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: Comment not found
    delete:
      tags: ["photo comments"]
      summary:  Delete a comment
      description: |-
        If the comment exists, it will be deleted.
        If the comment doesn't exist, nothing happens.
      operationId: uncommentPhoto
      responses:
        "200":
          description: Comment removed successfully from the photo
        "401":
          {$ref: "#/components/responses/UnauthorizedError"}
        "404":
          description: Comment not found
      security: 
        - bearerAuth: []